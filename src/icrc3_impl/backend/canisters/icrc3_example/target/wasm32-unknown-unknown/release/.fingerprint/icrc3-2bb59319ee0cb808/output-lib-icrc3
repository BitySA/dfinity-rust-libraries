{"$message_type":"diagnostic","message":"unused import: `utils::trace`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/icrc3/icrc3_library/src/blockchain/archive_canister_manager.rs","byte_start":59,"byte_end":71,"line_start":1,"line_end":1,"column_start":60,"column_end":72,"is_primary":true,"text":[{"text":"use crate::{blockchain::archive_canister::ArchiveCanister, utils::trace};","highlight_start":60,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/icrc3/icrc3_library/src/blockchain/archive_canister_manager.rs","byte_start":57,"byte_end":71,"line_start":1,"line_end":1,"column_start":58,"column_end":72,"is_primary":true,"text":[{"text":"use crate::{blockchain::archive_canister::ArchiveCanister, utils::trace};","highlight_start":58,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/blockchain/archive_canister_manager.rs","byte_start":11,"byte_end":12,"line_start":1,"line_end":1,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"use crate::{blockchain::archive_canister::ArchiveCanister, utils::trace};","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/blockchain/archive_canister_manager.rs","byte_start":71,"byte_end":72,"line_start":1,"line_end":1,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"use crate::{blockchain::archive_canister::ArchiveCanister, utils::trace};","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `utils::trace`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/icrc3/icrc3_library/src/blockchain/archive_canister_manager.rs:1:60\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{blockchain::archive_canister::ArchiveCanister, utils::trace};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `ICRC3Properties`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":80,"byte_end":95,"line_start":2,"line_end":2,"column_start":34,"column_end":49,"is_primary":true,"text":[{"text":"use crate::config::{ICRC3Config, ICRC3Properties};","highlight_start":34,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":78,"byte_end":95,"line_start":2,"line_end":2,"column_start":32,"column_end":49,"is_primary":true,"text":[{"text":"use crate::config::{ICRC3Config, ICRC3Properties};","highlight_start":32,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":66,"byte_end":67,"line_start":2,"line_end":2,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"use crate::config::{ICRC3Config, ICRC3Properties};","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":95,"byte_end":96,"line_start":2,"line_end":2,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"use crate::config::{ICRC3Config, ICRC3Properties};","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `ICRC3Properties`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/icrc3/icrc3_library/src/icrc3.rs:2:34\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::config::{ICRC3Config, ICRC3Properties};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `ICRC3DataCertificate` and `SupportedBlockType`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":353,"byte_end":373,"line_start":9,"line_end":9,"column_start":40,"column_end":60,"is_primary":true,"text":[{"text":"use icrc_ledger_types::icrc3::blocks::{ICRC3DataCertificate, SupportedBlockType};","highlight_start":40,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":375,"byte_end":393,"line_start":9,"line_end":9,"column_start":62,"column_end":80,"is_primary":true,"text":[{"text":"use icrc_ledger_types::icrc3::blocks::{ICRC3DataCertificate, SupportedBlockType};","highlight_start":62,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":314,"byte_end":396,"line_start":9,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use icrc_ledger_types::icrc3::blocks::{ICRC3DataCertificate, SupportedBlockType};","highlight_start":1,"highlight_end":82},{"text":"use serde::{Deserialize, Serialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `ICRC3DataCertificate` and `SupportedBlockType`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/icrc3/icrc3_library/src/icrc3.rs:9:40\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse icrc_ledger_types::icrc3::blocks::{ICRC3DataCertificate, SupportedBlockType};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `serde_bytes::ByteBuf`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":437,"byte_end":457,"line_start":11,"line_end":11,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use serde_bytes::ByteBuf;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/icrc3/icrc3_library/src/icrc3.rs","byte_start":433,"byte_end":459,"line_start":11,"line_end":12,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde_bytes::ByteBuf;","highlight_start":1,"highlight_end":26},{"text":"use std::collections::VecDeque;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde_bytes::ByteBuf`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/icrc3/icrc3_library/src/icrc3.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde_bytes::ByteBuf;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `phash`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/icrc3/icrc3_library/src/transaction.rs","byte_start":3256,"byte_end":3261,"line_start":107,"line_end":107,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"                let phash = match map.get(\"phash\") {","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/icrc3/icrc3_library/src/transaction.rs","byte_start":3256,"byte_end":3261,"line_start":107,"line_end":107,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"                let phash = match map.get(\"phash\") {","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":"_phash","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `phash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/icrc3/icrc3_library/src/transaction.rs:107:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let phash = match map.get(\"phash\") {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_phash`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":1677,"byte_end":1682,"line_start":53,"line_end":53,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn add_transaction(&mut self, transaction: T) -> Result<u64, Icrc3Error>;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(async_fn_in_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":1732,"byte_end":1732,"line_start":53,"line_end":53,"column_start":60,"column_end":60,"is_primary":true,"text":[{"text":"    async fn add_transaction(&mut self, transaction: T) -> Result<u64, Icrc3Error>;","highlight_start":60,"highlight_end":60}],"label":null,"suggested_replacement":"impl std::future::Future<Output = ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":1755,"byte_end":1755,"line_start":53,"line_end":53,"column_start":83,"column_end":83,"is_primary":true,"text":[{"text":"    async fn add_transaction(&mut self, transaction: T) -> Result<u64, Icrc3Error>;","highlight_start":83,"highlight_end":83}],"label":null,"suggested_replacement":"> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":1677,"byte_end":1683,"line_start":53,"line_end":53,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn add_transaction(&mut self, transaction: T) -> Result<u64, Icrc3Error>;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/icrc3/icrc3_library/src/interface.rs:53:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn add_transaction(&mut self, transaction: T) -> Result<u64, Icrc3Error>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(async_fn_in_trait)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9masync \u001b[0m\u001b[0mfn add_transaction(&mut self, transaction: T) -> Result<u64, Icrc3Error>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn add_transaction(&mut self, transaction: T) -> \u001b[0m\u001b[0m\u001b[38;5;10mimpl std::future::Future<Output = \u001b[0m\u001b[0mResult<u64, Icrc3Error>\u001b[0m\u001b[0m\u001b[38;5;10m> + Send\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":2264,"byte_end":2269,"line_start":71,"line_end":71,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn icrc3_get_blocks(","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":2352,"byte_end":2352,"line_start":74,"line_end":74,"column_start":10,"column_end":10,"is_primary":true,"text":[{"text":"    ) -> crate::types::icrc3_get_blocks::Response;","highlight_start":10,"highlight_end":10}],"label":null,"suggested_replacement":"impl std::future::Future<Output = ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":2392,"byte_end":2392,"line_start":74,"line_end":74,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"    ) -> crate::types::icrc3_get_blocks::Response;","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":"> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/icrc3/icrc3_library/src/interface.rs","byte_start":2264,"byte_end":2270,"line_start":71,"line_end":71,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn icrc3_get_blocks(","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/icrc3/icrc3_library/src/interface.rs:71:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn icrc3_get_blocks(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    fn icrc3_get_blocks(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         args: Vec<GetBlocksRequest>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    ) -> \u001b[0m\u001b[0m\u001b[38;5;10mimpl std::future::Future<Output = \u001b[0m\u001b[0mcrate::types::icrc3_get_blocks::Response\u001b[0m\u001b[0m\u001b[38;5;10m> + Send\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}
